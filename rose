#!/usr/bin/env bash

PS4="+ \${BASH_SOURCE##\${rvm_path:-}} : \${FUNCNAME[0]:+\${FUNCNAME[0]}()}  \${LINENO} > "
export PS4
set -o errtrace
set -o errexit

log()  { printf "%b\n" "$*" ; return $? ;  }

fail() { log "\nERROR: $*\n" ; exit 1 ; }

#-------------------------------------------------------------------------------
# CLI
#-------------------------------------------------------------------------------
usage()
{
  printf "%b" "
Usage

  rose [options] [action]

Options

  --trace                 enables debugging for the script
  --workspace <path>      workspace path to perform all builds
  --translator <path>     name of your ROSE translator
                          (Note: Your build environment must be setup)

Actions

  help   - Display CLI help (this output)

"
}


if [ $# -lt 1 ]; then
  usage
  exit 1
fi
# Parse CLI arguments.
while (( $# > 0 ))
do
  token="$1"
  shift
  case "$token" in

    --trace)
        set -o xtrace
        ;;

    --translator)
        if test -n "${1:-}"; then
            export translator="$1"
            shift
        else
            fail "--translator must be followed by the name of your ROSE translator."
        fi
        ;;

    --workspace)
        if test -n "${1:-}"; then
            export rose_workspace="$1"
            shift
        else
            fail "--workspace must be followed by a pathname."
        fi
        ;;

    help|usage)
        usage
        exit 0
        ;;

    -*)
        usage
        exit 1
        ;;

    compile)
        export rose_command="$token"
          if test -n "${1:-}"; then
              export rose_command_args="$1"
              shift
          else
              fail "compile command must be followed by an application name."
          fi
          ;;
    *)
        export rose_command_args="$rose_command_args $token"
        ;;

    esac
done

if [ -z "$rose_command" ]; then
    usage
    exit 1
fi


#-------------------------------------------------------------------------------
# Workspace setup
#-------------------------------------------------------------------------------
create_workspace()
{(

    #---------------------------------------------------------------------------
    # Usage
    #---------------------------------------------------------------------------
    local workspace="$1"
    if test -z "$workspace"; then
        fail "Usage: create_workspace <path>"
    fi

    #---------------------------------------------------------------------------
    # Create workspace
    #---------------------------------------------------------------------------
    if test -e "$workspace"; then
        log "[SKIP] Workspace already exists: '${workspace}'"
    else
        log "Creating '${workspace}'"
        mkdir -p "${workspace}"
    fi

) 2>&1 | while read; do log "[workspace] ${REPLY}"; done
[ ${PIPESTATUS[0]} -ne 0 ] && fail "[Error] Failed during Workspace creation" || true
}


#-------------------------------------------------------------------------------
# BEGIN - compile_exim
#-------------------------------------------------------------------------------
compile_exim()
{(

  #-----------------------------------------------------------------------------
  # Configure  Meta Information
  #-----------------------------------------------------------------------------
  declare -r VERSION=4.66
  declare -r TARBALL="exim-${VERSION}.tar.gz"
  declare -r DOWNLOAD_URL="http://ftp.exim.llorien.org/exim/exim4/${TARBALL}"

  #-----------------------------------------------------------------------------
  # Create Workspace
  #-----------------------------------------------------------------------------
  create_workspace "exim"
  cd "exim"

  test -e "${TARBALL}" || wget --no-check-certificate  "$DOWNLOAD_URL"

  tar xzvf "${TARBALL}"
  cd  "exim-${VERSION}"

  cp src/EDITME Local/Makefile
  (
      echo "CC=identityTranslator"
      echo "CFLAGS=-I$(pwd)/build-Linux-x86_64"
      echo "EXIM_USER=$USER"
      echo "BIN_DIRECTORY=$(pwd)/install_tree/bin"
      echo "CONFIGURE_FILE=$(pwd)/install_tree/configure"
  ) 2>&1 >> Local/Makefile
  [ ${PIPESTATUS[0]} -ne 0 ] && exit 1

  # Create eximon configuration
  cp exim_monitor/EDITME Local/eximon.conf

  cat src/pcre/config.h | sed 's/#include "..\/os.h"/#include "os.h"/g' > src/pcre/config.h-new
  cp src/pcre/config.h src/pcre/config.h-old
  cp src/pcre/config.h-new src/pcre/config.h


  # Hack: Replace #include "cnumber.h" with the actual number contained in
  # that header file:
  #
  # // DQ (10/23/2012): Modified source code to avoid this classic source-to-source
  # // issue (represented by ROSE test code test2012_78.c).
  files="$(grep -rn "#include \"cnumber.h\"" * | awk '{print $1}' | sed 's/:.*:.*//g')"
  # Generated by Make
  #cnumber_file="$(find . -iname "*cnumber\.h")"
  #cnumber="$(cat "$cnumber_file")"
  cnumber="6"
  for f in $files; do
    echo "Hacking file '$f' to replace '#include \"cnumber.h\"' with the actual contents '${cnumber}'..."
    mv $f $f-old
    cat "${f}-old" | sed 's/#include "cnumber\.h"/'${cnumber}'/g' > "$f" 
  done


  make --keep-going || exit 1

) 2>&1 | while read; do log "[exim] ${REPLY}"; done
[ ${PIPESTATUS[0]} -ne 0 ] && fail "[Error] Failed in compilation of Exim" || true
}
#-------------------------------------------------------------------------------
# END - compile_exim
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# BEGIN - compile_cherokee
#-------------------------------------------------------------------------------
compile_cherokee()
{(

  #-----------------------------------------------------------------------------
  # Configure  Meta Information
  #-----------------------------------------------------------------------------
  declare -r VERSION=1.2.101
  declare -r TARBALL="cherokee-${VERSION}.tar.gz"
  declare -r CHEROKEE_URL="http://www.cherokee-project.com/download/1.2/${VERSION}/${TARBALL}"

  #-----------------------------------------------------------------------------
  # Create Workspace
  #-----------------------------------------------------------------------------
  create_workspace "cherokee"
  cd "cherokee"

  test -e "${TARBALL}" || wget --no-check-certificate  "$CHEROKEE_URL"

  tar   xvzf cherokee-${VERSION}.tar.gz
  cd    cherokee-${VERSION}

  CC="$translator" ./configure --prefix="$(pwd)/install_tree"
  make --keep-going
  make install

) 2>&1 | while read; do log "[cherokee] ${REPLY}"; done
[ ${PIPESTATUS[0]} -ne 0 ] && fail "[Error] Failed in compilation of Cherokee" || true
}
#-------------------------------------------------------------------------------
# END - compile_cherokee
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# BEGIN - compile
#-------------------------------------------------------------------------------
compile()
{(

    #---------------------------------------------------------------------------
    # Usage
    #---------------------------------------------------------------------------
    local application="$1"; shift

    if test -z "$application"; then
        fail "Usage: compile <application_name>"
    fi

    compile_${application} "$*"

) 2>&1 | while read; do log "[compile] ${REPLY}"; done
[ ${PIPESTATUS[0]} -ne 0 ] && fail "[Error] Failed during Compile execution" || true
}
#-------------------------------------------------------------------------------
# END - compile
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
main()
{(

    create_workspace "${rose_workspace:=$(pwd)/rose_workspace}"
    cd "$rose_workspace"

    case "$rose_command" in

      compile)
          compile "$rose_command_args"
          ;;

      *)
          fail "Unknown command: '${rose_command}'."
          ;;
      esac

) 2>&1 | while read; do log "[rose] ${REPLY}"; done
[ ${PIPESTATUS[0]} -ne 0 ] && fail "[Error] Failed in main operation" || true
}

echo "--> $rose_command"
time main
